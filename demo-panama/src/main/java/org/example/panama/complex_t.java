// Generated by jextract

package org.example.panama;

import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SegmentScope;
import java.lang.foreign.StructLayout;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct {
 *     int id;
 *     char* name;
 *     double score;
 * };
 *}
 */
public class complex_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("id"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("name"),
            Constants$root.C_DOUBLE$LAYOUT.withName("score")
    );

    public static MemoryLayout $LAYOUT() {
        return complex_t.$struct$LAYOUT;
    }

    static final VarHandle id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("id"));

    public static VarHandle id$VH() {
        return complex_t.id$VH;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int id;
     *}
     */
    public static int id$get(MemorySegment seg) {
        return (int) complex_t.id$VH.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int id;
     *}
     */
    public static void id$set(MemorySegment seg, int x) {
        complex_t.id$VH.set(seg, x);
    }

    public static int id$get(MemorySegment seg, long index) {
        return (int) complex_t.id$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void id$set(MemorySegment seg, long index, int x) {
        complex_t.id$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));

    public static VarHandle name$VH() {
        return complex_t.name$VH;
    }

    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     *}
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) complex_t.name$VH.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     *}
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        complex_t.name$VH.set(seg, x);
    }

    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) complex_t.name$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        complex_t.name$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle score$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("score"));

    public static VarHandle score$VH() {
        return complex_t.score$VH;
    }

    /**
     * Getter for field:
     * {@snippet :
     * double score;
     *}
     */
    public static double score$get(MemorySegment seg) {
        return (double) complex_t.score$VH.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * double score;
     *}
     */
    public static void score$set(MemorySegment seg, double x) {
        complex_t.score$VH.set(seg, x);
    }

    public static double score$get(MemorySegment seg, long index) {
        return (double) complex_t.score$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void score$set(MemorySegment seg, long index, double x) {
        complex_t.score$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


