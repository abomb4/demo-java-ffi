// Generated by jextract

package org.example.panama;

import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.OfAddress;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfDouble;
import static java.lang.foreign.ValueLayout.OfFloat;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;
import static java.lang.foreign.ValueLayout.OfShort;

public class libffidemo_h {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;

    public static MethodHandle demo_sum$MH() {
        return RuntimeHelper.requireNonNull(constants$0.demo_sum$MH, "demo_sum");
    }

    /**
     * {@snippet :
     * int demo_sum(int, int);
     *}
     */
    public static int demo_sum(int x0, int x1) {
        var mh$ = demo_sum$MH();
        try {
            return (int) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle demo_generate_hello$MH() {
        return RuntimeHelper.requireNonNull(constants$0.demo_generate_hello$MH, "demo_generate_hello");
    }

    /**
     * {@snippet :
     * char* demo_generate_hello(char*);
     *}
     */
    public static MemorySegment demo_generate_hello(MemorySegment x0) {
        var mh$ = demo_generate_hello$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle get_by_id$MH() {
        return RuntimeHelper.requireNonNull(constants$0.get_by_id$MH, "get_by_id");
    }

    /**
     * {@snippet :
     * complex_t* get_by_id(int);
     *}
     */
    public static MemorySegment get_by_id(int x0) {
        var mh$ = get_by_id$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle get_by_name_like$MH() {
        return RuntimeHelper.requireNonNull(constants$0.get_by_name_like$MH, "get_by_name_like");
    }

    /**
     * {@snippet :
     * complex_t** get_by_name_like(char*);
     *}
     */
    public static MemorySegment get_by_name_like(MemorySegment x0) {
        var mh$ = get_by_name_like$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


